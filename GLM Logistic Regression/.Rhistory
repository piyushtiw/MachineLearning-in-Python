#---------------Input---------------
input_data = read_excel('eBayAuctions.xls')
print(head(input_data))
head(input_data)
mylogit <- glm(Competitive? ~ Category + currency + sellerRating + Duration + endDay + ClosePrice + OpenPrice, data = mydata, family = "binomial")
mylogit <- glm(`Competitive?` ~ Category + currency + sellerRating + Duration + endDay + ClosePrice + OpenPrice, data = mydata, family = "binomial")
mylogit <- glm(`Competitive?` ~ Category + currency + sellerRating + Duration + endDay + ClosePrice + OpenPrice, data = input_data, family = "binomial")
summary(mylogit)
mylogit <- glm(`Competitive?` ~ ., data = input_data, family = "binomial")
summary(mylogit)
input.melt = melt(train_data, id.vars = c(1,2,4,5), measure.vars = 8)
pivot_table1 = cast(input.melt, currency ~ variable, mean)
pivot_table2 = cast(input.melt, Category ~ variable, mean)
pivot_table3 = cast(input.melt, endDay ~ variable, mean)
pivot_table4 = cast(input.melt, Duration ~ variable, mean)
pivot_table1
pivot_table2
pivot_table3
pivot_table4
pivot_table = generate_pivot_table(pivot_table1)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['currency']==pivot_table[i,1], 'currency'] = pivot_table[i,3]
test_data[test_data['currency']==pivot_table[i,1], 'currency'] = pivot_table[i,3]
}
pivot_table
pivot_table = generate_pivot_table(pivot_table2)
pivot_table
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
test_data[test_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
}
train_data
head(train_data)
pivot_table = generate_pivot_table(pivot_table3)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['endDay']==pivot_table[i,1], 'endDay'] = pivot_table[i,3]
test_data[test_data['endDay']==pivot_table[i,1], 'endDay'] = pivot_table[i,3]
}
pivot_table = generate_pivot_table(pivot_table4)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['Duration']==pivot_table[i,1], 'Duration'] = pivot_table[i,3]
test_data[test_data['Duration']==pivot_table[i,1], 'Duration'] = pivot_table[i,3]
}
head(train_data)
train_data = dummy.data.frame(train_data)
head(train_data)
fit.all <- glm(`Competitive?` ~.,family=binomial(link='logit'),data=train_data, control = list(maxit = 500))
summary(fit.all)
coefs = fit.all$coefficients
coefs
m = coefs[1]
mi = 1;
for (i in 2:length(coefs)) {
op1 = abs(as.numeric(coefs[i]))
if (!is.na(op1) && op1 > abs(as.numeric(m))) {
m = coefs[i]
mi = i
}
}
m_name = m
for (i in names(train_data)) {
if (grepl(i, names(fit.all$coefficients)[mi]))
m_name = i
}
print(m_name)
subset = c("Competitive?", m_name)
subset
fit.single = glm(`Competitive?` ~., family=binomial(link='logit'), data=train_data[subset])
summary(fit.single)
significance_level = 0.05
coefs = summary(fit.all)$coefficients
significant_predictors = coefs[coefs[,4] < significance_level,]
significance_level = 0.05
coefs = summary(fit.all)$coefficients
significant_predictors = coefs[coefs[,4] < significance_level,]
significant_predictors
m_name = c("Competitive?")
for (i in names(train_data)) {
for (s in names(significant_predictors[,1])) {
if (grepl(i, s)) {
m_name = c(m_name, i)
}
}
}
m_name = unique(m_name)
m_name
fit.reduced = glm(`Competitive?` ~., family=binomial(link='logit'), data=train_data[m_name])
summary(fit.reduced)
anova(fit.reduced, fit.all, test='Chisq')
s=rep(length(train_data$`Competitive?`), length(train_data$`Competitive?`))
s
qcc.overdispersion.test(train_data$`Competitive?`, size=s, type="binomial")
clearPushBack()
train_data = dummy.data.frame(train_data)
library(readxl)
library(reshape)
library(dummies)
library(qcc)
set.seed(10)
generate_pivot_table <- function (pivot_table) {
thresh = 0.05
pivot_table['merge'] = pivot_table[1]
len = dim(pivot_table)[1]
for (i in 1:(len-1)) {
for (j in (i+1):len) {
if ( j <= len) {
if (abs(pivot_table[i,2] - pivot_table[j,2]) < thresh) {
pivot_table[j,3] = pivot_table[i,3]
}
}
}
}
return (pivot_table)
}
#---------------Input---------------
input_data = read_excel('eBayAuctions.xls')
print(head(input_data))
train_size = 0.60
train_indices = sample(seq_len(nrow(input_data)), size = floor(train_size*nrow(input_data)))
train_indices
train_data = input_data[train_indices,]
head(train_data)
test_data = input_data[-train_indices,]
head(test_data)
train_copy = train_data
#---------Generating Pivot Tables---------
input.melt = melt(train_data, id.vars = c(1,2,4,5), measure.vars = 8)
pivot_table1 = cast(input.melt, currency ~ variable, mean)
input.melt
pivot_table2 = cast(input.melt, Category ~ variable, mean)
pivot_table3 = cast(input.melt, endDay ~ variable, mean)
pivot_table4 = cast(input.melt, Duration ~ variable, mean)
head(pivot_table)
head(pivot_table1)
head(pivot_table2)
head(pivot_table3)
head(pivot_table4)
#----------Using Pivot Tables to merge categories---------
pivot_table = generate_pivot_table(pivot_table1)
head(pivot_table)
len = dim(pivot_table)[1]
len
for (i in 1:len) {
train_data[train_data['currency']==pivot_table[i,1], 'currency'] = pivot_table[i,3]
test_data[test_data['currency']==pivot_table[i,1], 'currency'] = pivot_table[i,3]
}
head(pivot_table)
head(train_data)
pivot_table = generate_pivot_table(pivot_table2)
head(pivot_table)
len = dim(pivot_table)[1]
len
pivot_table
for (i in 1:len) {
train_data[train_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
test_data[test_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
}
head(train_data)
i = 1
pivot_table[i,3]
pivot_table
train_data[train_data['Category']
==pivot_table[i,1], 'Category']
pivot_table
pivot_table2
pivot_table2[1]
len = dim(pivot_table)[1]
len
pivot_table2
pivot_table
len = dim(pivot_table)[1]
len = dim(pivot_table)[1]
len = dim(pivot_table)[1]
len = dim(pivot_table)[1]
len = dim(pivot_table)[1]
len = dim(pivot_table)[1]
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
test_data[test_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
}
pivot_table = generate_pivot_table(pivot_table3)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['endDay']==pivot_table[i,1], 'endDay'] = pivot_table[i,3]
test_data[test_data['endDay']==pivot_table[i,1], 'endDay'] = pivot_table[i,3]
}
pivot_table = generate_pivot_table(pivot_table4)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['Duration']==pivot_table[i,1], 'Duration'] = pivot_table[i,3]
test_data[test_data['Duration']==pivot_table[i,1], 'Duration'] = pivot_table[i,3]
}
train_data = dummy.data.frame(train_data)
fit.all <- glm(`Competitive?` ~.,family=binomial(link='logit'),data=train_data, control = list(maxit = 500))
fit.all
summary(fit.all)
coefs = fit.all$coefficients
#----- Getting the predictor with the highest regression coefficient------------
m = coefs[1]
coefs
m
mi = 1;
for (i in 2:length(coefs)) {
op1 = abs(as.numeric(coefs[i]))
if (!is.na(op1) && op1 > abs(as.numeric(m))) {
m = coefs[i]
mi = i
}
}
m_name = m
for (i in names(train_data)) {
if (grepl(i, names(fit.all$coefficients)[mi]))
m_name = i
}
print(m_name)
subset = c("Competitive?", m_name)
fit.single = glm(`Competitive?` ~., family=binomial(link='logit'), data=train_data[subset])
#---------Getting Statistically significant predictors-----
significance_level = 0.05
coefs = summary(fit.all)$coefficients
significant_predictors = coefs[coefs[,4] < significance_level,]
#---------------Reduced Model---------------------
m_name = c("Competitive?")
for (i in names(train_data)) {
for (s in names(significant_predictors[,1])) {
if (grepl(i, s)) {
m_name = c(m_name, i)
}
}
}
m_name = unique(m_name)
fit.reduced = glm(`Competitive?` ~., family=binomial(link='logit'), data=train_data[m_name])
anova(fit.reduced, fit.all, test='Chisq')
s=rep(length(train_data$`Competitive?`), length(train_data$`Competitive?`))
qcc.overdispersion.test(train_data$`Competitive?`, size=s, type="binomial")
summary(fit.single)
m_name
summary(fit.all)
library(readxl)
library(reshape)
library(dummies)
library(qcc)
set.seed(10)
generate_pivot_table <- function (pivot_table) {
thresh = 0.05
pivot_table['merge'] = pivot_table[1]
len = dim(pivot_table)[1]
for (i in 1:(len-1)) {
for (j in (i+1):len) {
if ( j <= len) {
if (abs(pivot_table[i,2] - pivot_table[j,2]) < thresh) {
pivot_table[j,3] = pivot_table[i,3]
}
}
}
}
return (pivot_table)
}
#---------------Input---------------
input_data = read_excel('eBayAuctions.xls')
print(head(input_data))
train_size = 0.60
train_indices = sample(seq_len(nrow(input_data)), size = floor(train_size*nrow(input_data)))
train_data = input_data[train_indices,]
test_data = input_data[-train_indices,]
train_copy = train_data
#---------Generating Pivot Tables---------
input.melt = melt(train_data, id.vars = c(1,2,4,5), measure.vars = 8)
pivot_table1 = cast(input.melt, currency ~ variable, mean)
pivot_table2 = cast(input.melt, Category ~ variable, mean)
pivot_table3 = cast(input.melt, endDay ~ variable, mean)
pivot_table4 = cast(input.melt, Duration ~ variable, mean)
head(pivot_table)
head(pivot_table1)
head(pivot_table2)
head(pivot_table3)
head(pivot_table4)
#----------Using Pivot Tables to merge categories---------
pivot_table = generate_pivot_table(pivot_table1)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['currency']==pivot_table[i,1], 'currency'] = pivot_table[i,3]
test_data[test_data['currency']==pivot_table[i,1], 'currency'] = pivot_table[i,3]
}
head(pivot_table)
pivot_table = generate_pivot_table(pivot_table2)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
test_data[test_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
}
pivot_table = generate_pivot_table(pivot_table3)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['endDay']==pivot_table[i,1], 'endDay'] = pivot_table[i,3]
test_data[test_data['endDay']==pivot_table[i,1], 'endDay'] = pivot_table[i,3]
}
pivot_table = generate_pivot_table(pivot_table4)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['Duration']==pivot_table[i,1], 'Duration'] = pivot_table[i,3]
test_data[test_data['Duration']==pivot_table[i,1], 'Duration'] = pivot_table[i,3]
}
train_data = dummy.data.frame(train_data)
fit.all <- glm(`Competitive?` ~.,family=binomial(link='logit'),data=train_data, control = list(maxit = 500))
coefs = fit.all$coefficients
coefs
summary(fit.all)
#----- Getting the predictor with the highest regression coefficient------------
m = coefs[1]
mi = 1;
for (i in 2:length(coefs)) {
op1 = abs(as.numeric(coefs[i]))
if (!is.na(op1) && op1 > abs(as.numeric(m))) {
m = coefs[i]
mi = i
}
}
m_name = m
for (i in names(train_data)) {
if (grepl(i, names(fit.all$coefficients)[mi]))
m_name = i
}
print(m_name)
subset = c("Competitive?", m_name)
fit.single = glm(`Competitive?` ~., family=binomial(link='logit'), data=train_data[subset])
#---------Getting Statistically significant predictors-----
significance_level = 0.05
coefs = summary(fit.all)$coefficients
significant_predictors = coefs[coefs[,4] < significance_level,]
#---------------Reduced Model---------------------
m_name = c("Competitive?")
for (i in names(train_data)) {
for (s in names(significant_predictors[,1])) {
if (grepl(i, s)) {
m_name = c(m_name, i)
}
}
}
m_name = unique(m_name)
fit.reduced = glm(`Competitive?` ~., family=binomial(link='logit'), data=train_data[m_name])
anova(fit.reduced, fit.all, test='Chisq')
summary(fit.reduced)
s=rep(length(train_data$`Competitive?`), length(train_data$`Competitive?`))
qcc.overdispersion.test(train_data$`Competitive?`, size=s, type="binomial")
library(readxl)
library(reshape)
library(dummies)
library(qcc)
set.seed(10)
threshold = 0.05
generate_pivot_table <- function (pivot_table) {
pivot_table['merge'] = pivot_table[1]
len = dim(pivot_table)[1]
for (i in 1:(len-1)) {
for (j in (i+1):len) {
if (abs(pivot_table[i,2] - pivot_table[j,2]) < threshold) {
pivot_table[j,3] = pivot_table[i,3]
}
}
}
return (pivot_table)
}
#---------------Input---------------
input_data = read_excel('eBayAuctions.xls')
print(head(input_data))
train_size = 0.60
train_indices = sample(seq_len(nrow(input_data)), size = floor(train_size*nrow(input_data)))
train_data = input_data[train_indices,]
test_data = input_data[-train_indices,]
input.melt = melt(train_data, id.vars = c(1,2,4,5), measure.vars = 8)
pivot_table1 = cast(input.melt, currency ~ variable, mean)
pivot_table2 = cast(input.melt, Category ~ variable, mean)
pivot_table3 = cast(input.melt, endDay ~ variable, mean)
pivot_table4 = cast(input.melt, Duration ~ variable, mean)
head(pivot_table)
head(pivot_table1)
head(pivot_table2)
pivot_table = generate_pivot_table(pivot_table1)
len = dim(pivot_table)[1]
len
pivot_table
for (i in 1:len) {
train_data[train_data['currency']==pivot_table[i,1], 'currency'] = pivot_table[i,3]
test_data[test_data['currency']==pivot_table[i,1], 'currency'] = pivot_table[i,3]
}
pivot_table = generate_pivot_table(pivot_table2)
len = dim(pivot_table)[1]
pivot_table
for (i in 1:len) {
train_data[train_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
test_data[test_data['Category']==pivot_table[i,1], 'Category'] = pivot_table[i,3]
}
pivot_table = generate_pivot_table(pivot_table3)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['endDay']==pivot_table[i,1], 'endDay'] = pivot_table[i,3]
test_data[test_data['endDay']==pivot_table[i,1], 'endDay'] = pivot_table[i,3]
}
pivot_table = generate_pivot_table(pivot_table4)
len = dim(pivot_table)[1]
for (i in 1:len) {
train_data[train_data['Duration']==pivot_table[i,1], 'Duration'] = pivot_table[i,3]
test_data[test_data['Duration']==pivot_table[i,1], 'Duration'] = pivot_table[i,3]
}
train_data = dummy.data.frame(train_data)
fit.all <- glm(`Competitive?` ~.,family=binomial(link='logit'),data=train_data, control = list(maxit = 500))
summary(fit.all)
m = coefs[1]
m
names(train_data)
fit.all <- glm(`Competitive?` ~.,family=binomial(link='logit'),data=train_data, control = list(maxit = 500))
coefs = fit.all$coefficients
coefs
maxCoefValue = coefs[1]
maxCoefIndex = 1;
for (coefIndex in 2:length(coefs)) {
op1 = abs(as.numeric(coefs[coefIndex]))
if (!is.na(op1) && op1 > abs(as.numeric(maxCoefValue))) {
maxCoefValue = coefs[i]
maxCoefIndex = i
}
}
highestEstimatePredictorName = maxCoefValue
for (predictor in names(train_data)) {
if (grepl(predictor, names(fit.all$coefficients)[maxCoefIndex]))
highestEstimatePredictorName = predictor
}
print(highestEstimatePredictorName)
subset = c("Competitive?", highestEstimatePredictorName)
subset
fit.single = glm(`Competitive?` ~., family=binomial(link='logit'), data=train_data[subset])
significance_level = 0.05
coefs = summary(fit.all)$coefficients
coefs
significant_predictors = coefs[coefs[,4] < significance_level,]
m_name = c("Competitive?")
m_name
names(significant_predictors[,1])
names(significant_predictors[,1])
for (i in names(train_data)) {
for (s in names(significant_predictors[,1])) {
if (grepl(i, s)) {
m_name = c(m_name, i)
}
}
}
m_name = unique(m_name)
m_name
fit.reduced = glm(`Competitive?` ~., family=binomial(link='logit'), data=train_data[m_name])
anova(fit.reduced, fit.all, test='Chisq')
s=rep(length(train_data$`Competitive?`), length(train_data$`Competitive?`))
qcc.overdispersion.test(train_data$`Competitive?`, size=s, type="binomial")
head(pivot_table2)
head(pivot_table1)
head(pivot_table2)
head(pivot_table3)
head(pivot_table4)
generate_pivot_table <- function (pivot_table) {
pivot_table['merge'] = pivot_table[1]
len = dim(pivot_table)[1]
for (i in 1:(len-1)) {
for (j in (i+1):len) {
if (abs(pivot_table[i,2] - pivot_table[j,2]) < threshold) {
pivot_table[j,3] = pivot_table[i,3]
}
}
}
return (pivot_table)
}
n <- 20
x <- seq(0, 10, length.out=n)
mu_x <- 6; var_x <- 1.5^2
mu_0 <- 4; var_0 <- 0.8^2
# Generate samples from p(x) and prior p(mu) distributions
sample_dist <- dnorm(x, mean=mu_x, sd=sqrt(var_x))
prior_dist <- dnorm(x, mean=mu_0, sd=sqrt(var_0))
# Calculate the mu_n and var_n based on the formulas in Q3
x_i <- rnorm(n, mean=mu_x, sd=sqrt(var_x))
var_n <- (var_x*var_0)/(var_x + n*var_0)
t1 <- (var_x*mu_0)/(var_x+n*var_0)
t2 <- (n*mean(x_i)*var_0)/(var_x+n*var_0)
mu_n <- t1 + t2
# Generate samples from the posterior distribution
posterior_dist <- dnorm(x, mean=mu_n, sd=sqrt(var_n))
plot(0, 0, xlim=c(0,10), ylim=c(0,1), main="Probability Density Plot", xlab="X", ylab="Probability
Density")
lines(x, sample_dist, col='red')
lines(x, prior_dist, col='green')
lines(x, posterior_dist, col='blue')
n <- 20
x <- seq(0, 10, length.out=n)
mu_x <- 6; var_x <- 1.5^2
mu_0 <- 4; var_0 <- 0.8^2
sample_dist <- dnorm(x, mean=mu_x, sd=sqrt(var_x))
prior_dist <- dnorm(x, mean=mu_0, sd=sqrt(var_0))
x_i <- rnorm(n, mean=mu_x, sd=sqrt(var_x))
var_n <- (var_x*var_0)/(var_x + n*var_0)
t1 <- (var_x*mu_0)/(var_x+n*var_0)
t2 <- (n*mean(x_i)*var_0)/(var_x+n*var_0)
mu_n <- t1 + t2
posterior_dist <- dnorm(x, mean=mu_n, sd=sqrt(var_n))
plot(0, 0, xlim=c(0,10), ylim=c(0,1), main="Probability Density Plot", xlab="X", ylab="Probability
Density")
lines(x, sample_dist, col='blue')
lines(x, prior_dist, col='green')
lines(x, posterior_dist, col='red')
